<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace Twilio\Tests\Integration\Preview\Trustedcomms;

use Twilio\Exceptions\DeserializeException;
use Twilio\Exceptions\TwilioException;
use Twilio\Http\Response;
use Twilio\Tests\HolodeckTestCase;
use Twilio\Tests\Request;

class BrandsInformationTest extends HolodeckTestCase {
    public function testFetchRequest(): void {
        $this->holodeck->mock(new Response(500, ''));

        $options = ['ifNoneMatch' => "if_none_match", ];

        try {
            $this->twilio->preview->trustedComms->brandsInformation()->fetch($options);
        } catch (DeserializeException $e) {}
          catch (TwilioException $e) {}

        $headers = ['If-None-Match' => "if_none_match", ];

        $this->assertRequest(new Request(
            'get',
            'https://preview.twilio.com/TrustedComms/BrandsInformation',
            [],
            [],
            $headers
        ));
    }

    public function testFetchResultsWithEtagResponse(): void {
        $this->holodeck->mock(new Response(
            200,
            '
            {
                "update_time": "2020-05-19T19:47:51Z",
                "file_link": "https://www.twilio.com",
                "file_link_ttl_in_seconds": "900",
                "url": "https://preview.twilio.com/TrustedComms/BrandsInformation"
            }
            '
        ));

        $actual = $this->twilio->preview->trustedComms->brandsInformation()->fetch();

        $this->assertNotNull($actual);
    }
}